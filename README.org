* Rivet Jet Substructure Study
** Building and running
#+begin_example
 rivet-buildplugin RivetMC_GENSTUDY_JETCHARGE.so MC_GENSTUDY_JETCHARGE.cc
 rivet -a MC_GENSTUDY_JETCHARGE wInclusive50k.data -H wInclusive.aida
#+end_example
   
** Physics Motivation
The big picture aim of this study is to provide an accurate picture of
how different Monte Carlo generators handle creation of jets.  In
order to fully assess different generators, we must extract as much
information as possible from the jets.
** Implemented theoreticals
*** Jet Charge
Jet Charge is defined as
$$
Q_{\kappa}^i = \frac{1}{(P_T^{jet})^\kappa}\sum_{j\in jet}Q_j(p_T^j)^\kappa
$$
Put in words, its the sum of the charge of the constituent particles
weighted by the particle's transverse momentum. 
*** Jet Dipolarity
Jet dipolarity is a p_T weighted sum over the radii of sub-jets. It is
typically only defined for jets with two subjets. 


** Analysis Cuts
*** W boson selection
    - The W finder projection is configured as 
#+begin_src c++
      std::vector<std::pair<double, double > > muonEtaRanges;
      muonEtaRanges.push_back(make_pair(-2.4,2.4));
      WFinder muWFinder(fs, muonEtaRanges, 20*GeV, MUON, 
			40*GeV,1000*GeV,25*GeV,0.4,true,false,80.4,true);
#+end_src
    - In english:
      - Selections on the Muon:
	- $|\eta|<2.4$
	- $p_T > 20 GeV/c$
	- $\Delta R >0.4$ (Maximum delta R between muon and a jet)
      - Selections on the W
	- $40 GeV/c^2 < m_T < 1000 GeV/c^2$
clusterPhotons is true, trackPhotons is false
** Histograms
   - Jet Multiplicity 
     - Histogram of number of Jets in events over all events
   - Inclusive p_T
   - Inclusive E
   - Inclusive Mass
   - Invariant mass of jet pairs
   - Invariant mass of jet triples
   - Invariant mass of sub-jet pairs
   - Invariant mass of sub-jet triples
   - DeltaR of sub-jets
   - Invariant mass of all subjets
   - Dipolarity of jet with two subjets
   - Charge of jet
** Pythia generator results for W production
|--------------------------+-------------+--------+------------|
| Subprocess               | # of points |        | Sigma (mb) |
|--------------------------+-------------+--------+------------|
|                          |   Generated |  Tried |            |
|--------------------------+-------------+--------+------------|
| 0 Inclusive              |       50000 | 593829 |   1.475e-4 |
| 16 f + fbar' -> g + W\pm |       29847 | 408870 |   8.814e-5 |
| 31 f + g -> f' +  W\pm   |       20153 | 184959 |   5.937e-5 |
|--------------------------+-------------+--------+------------|


* Working notes (dirty and unorganized)

** Delta R of subjets
   - Look at min DeltaR max DeltaR or highest p_T pair may give
     better subjets
   - Not intrinsically correlated to subjet multiplicity
* TODO: 
  - Rename invariant mass of jets to jet mass
  - ditto for invariant mass of subjets
  - Remove skew and stddev from set of output plots, comment out in
    code!
  - Understand exactly how the normalization is working
  - Email Carl with an update on software
  - Run high statistics inclusive sample p_T cut at 35, 250k
  - Reduce binning in rough plots
  - Run over again with herwig and pythia 8 (inclusive) 
    - Have to configure param file for herwig
    - Search atlas software (or talk to Lei)

Here's the issue: As you said before, I need to recluster the jets
according to kt 0.6 in order to extract sensible subjets.  I do this
with the line:
#BEGIN_SRC c++
PseudoJets constituents=jet.validated_cs()->constituents(jet);
fastjet::ClusterSequence clusterSeq(constituents,fastjet::JetDefinition(fastjet::kt_algorithm,0.6)); 
PseudoJets subJets=clusterSeq.exclusive_subjets_up_to(jet,3);
#END_SRC 
The issue is when clusterSeq.exlcusive_subjets_up_to(jet,3); is called.
In the class ClusterSequence, an assertion is made that the clusterSeq
is associated with the jet.  This fails when the code runs as:
#BEGIN_EXAMPLE 
python: ClusterSequence.cc:984: void fastjet::ClusterSequence::get_subhist_set(std::set<const fastjet::ClusterSequence::history_element*>&, const fastjet::PseudoJet&, double, int) const: Assertion `contains(jet)' failed.
#END_EXAMPLE

Which after reading the code leads to this definition of 'contains()':
#BEGIN_SRC c++
//----------------------------------------------------------------------
// returns true if the cluster sequence contains this jet (i.e. jet's
// structure is this cluster sequence's and the cluster history index
// is in a consistent range)
bool ClusterSequence::contains(const PseudoJet & jet) const {
  return jet.cluster_hist_index() >= 0 
    &&   jet.cluster_hist_index() < int(_history.size())
    &&   jet.has_valid_cluster_sequence()
    &&   jet.associated_cluster_sequence() == this;
}
#END_SRC

I know that jet.has_valid_cluster_sequence() is true because I check
that before I call my code.  I'm also assuming that the hist_index()
parts pass as well (though I have no obvious way of checking).  I'm
afraid its the last line that is failing because I made a copy of the
associated_cluster_sequence when I reclustered!  



 - Do this analysis for low p_T W's 
 - Get rid of Phi distribution, come back if crazy things start happening

 - Put Current of FastJet in Github repo and push there

Take the hardest jet to cut against gluons from QCD. 

 - Pythia -> cross sections at the end of the run, this will give
   W+quark or W+gluon, 

   - if W+gluon then the charge is zero
   - if W+quark, then the charge is interesting
     Make table (conserving weak isospin) predicting what kind of
     quark will come with which W (charge) 
      
     Going to get more positive W's (or negative quarks)
     - Product charge W with quark charge to increase statistical
       power (histogram jet charge*W charge)

       - Histogram the W charge 


** Cuts
  Get Jets ordered by P_t

  use the first one as the recoiling jet

** Histograms
  - W charge
  - W*jet charge
    Make same distributions for the hard p_T 

Any subjet calculation should be calculated in FasJet calculation class
 - Move 

** Things for future
 - In the future look at Inv Mass dist of Jets as a function of W p_T
   cut

** Presentation next week
  Feynman diagrams for all related processes
  

